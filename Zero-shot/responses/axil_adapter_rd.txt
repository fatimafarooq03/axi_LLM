```verilog
module axil_adapter_rd #
(
    // Parameters
    parameter ADDR_WIDTH = 32,  // Width of address bus in bits
    parameter S_DATA_WIDTH = 32,  // Width of input (slave) interface data bus in bits
    parameter S_STRB_WIDTH = (S_DATA_WIDTH/8),  // Width of input (slave) interface wstrb (width of data bus in words)
    parameter M_DATA_WIDTH = 32,  // Width of output (master) interface data bus in bits
    parameter M_STRB_WIDTH = (M_DATA_WIDTH/8)  // Width of output (master) interface wstrb (width of data bus in words)
)
(
    // Ports
    input  wire                     clk,  // Clock signal
    input  wire                     rst,  // Reset signal

    /*
     * AXI lite slave interface
     */
    input  wire [ADDR_WIDTH-1:0]    s_axil_araddr,
    input  wire [2:0]               s_axil_arprot,
    input  wire                     s_axil_arvalid,
    output reg                      s_axil_arready,
    output reg  [S_DATA_WIDTH-1:0]  s_axil_rdata,
    output reg  [1:0]               s_axil_rresp,
    output reg                      s_axil_rvalid,
    input  wire                     s_axil_rready,

    /*
     * AXI lite master interface
     */
    output reg  [ADDR_WIDTH-1:0]    m_axil_araddr,
    output reg  [2:0]               m_axil_arprot,
    output reg                      m_axil_arvalid,
    input  wire                     m_axil_arready,
    input  wire [M_DATA_WIDTH-1:0]  m_axil_rdata,
    input  wire [1:0]               m_axil_rresp,
    input  wire                     m_axil_rvalid,
    output reg                      m_axil_rready
);

// State machine states
localparam STATE_IDLE = 0;
localparam STATE_DATA = 1;

// State registers
reg state, next_state;

// Data and address registers
reg [S_DATA_WIDTH-1:0] rdata_reg;
reg [ADDR_WIDTH-1:0] araddr_reg;
reg [2:0] arprot_reg;

// Sequential logic for state transition
always @(posedge clk) begin
    if (rst) begin
        state <= STATE_IDLE;
        s_axil_arready <= 1'b1;
        s_axil_rvalid <= 1'b0;
        m_axil_arvalid <= 1'b0;
        m_axil_rready <= 1'b0;
    end else begin
        state <= next_state;

        // Slave interface controls
        case (state)
            STATE_IDLE: begin
                if (s_axil_arvalid) begin
                    s_axil_arready <= 1'b0;
                    araddr_reg <= s_axil_araddr;
                    arprot_reg <= s_axil_arprot;
                    m_axil_araddr <= s_axil_araddr;
                    m_axil_arprot <= s_axil_arprot;
                    m_axil_arvalid <= 1'b1;
                    m_axil_rready <= 1'b1;
                end
            end

            STATE_DATA: begin
                if (m_axil_rvalid) begin
                    rdata_reg <= m_axil_rdata;
                    s_axil_rdata <= m_axil_rdata;
                    s_axil_rresp <= m_axil_rresp;
                    s_axil_rvalid <= 1'b1;
                    m_axil_rready <= 1'b0;
                    if (s_axil_rready) begin
                        s_axil_rvalid <= 1'b0;
                        s_axil_arready <= 1'b1;
                    end
                end
            end
        endcase
    end
end

// Combinatorial logic for next state
always @(*) begin
    next_state = state;
    case (state)
        STATE_IDLE: begin
            if (s_axil_arvalid && s_axil_arready) begin
                next_state = STATE_DATA;
            end
        end

        STATE_DATA: begin
            if (m_axil_rvalid && m_axil_rready) begin
                next_state = STATE_IDLE;
            end
        end
    endcase
end

endmodule
```