```verilog
module axi_dma #
(
    // Parameters
    parameter AXI_DATA_WIDTH = 32,  // Width of AXI data bus in bits
    parameter AXI_ADDR_WIDTH = 16,  // Width of AXI address bus in bits
    parameter AXI_STRB_WIDTH = (AXI_DATA_WIDTH/8),  // Width of AXI wstrb (width of data bus in words)
    parameter AXI_ID_WIDTH = 8,  // Width of AXI ID signal
    parameter AXI_MAX_BURST_LEN = 16,  // Maximum AXI burst length to generate
    parameter AXIS_DATA_WIDTH = AXI_DATA_WIDTH,  // Width of AXI stream interfaces in bits
    parameter AXIS_KEEP_ENABLE = (AXIS_DATA_WIDTH>8),  // Use AXI stream tkeep signal
    parameter AXIS_KEEP_WIDTH = (AXIS_DATA_WIDTH/8),  // AXI stream tkeep signal width (words per cycle)
    parameter AXIS_LAST_ENABLE = 1,  // Use AXI stream tlast signal
    parameter AXIS_ID_ENABLE = 0,  // Propagate AXI stream tid signal
    parameter AXIS_ID_WIDTH = 8,  // AXI stream tid signal width
    parameter AXIS_DEST_ENABLE = 0,  // Propagate AXI stream tdest signal
    parameter AXIS_DEST_WIDTH = 8,  // AXI stream tdest signal width
    parameter AXIS_USER_ENABLE = 1,  // Propagate AXI stream tuser signal
    parameter AXIS_USER_WIDTH = 1,  // AXI stream tuser signal width
    parameter LEN_WIDTH = 20,  // Width of length field
    parameter TAG_WIDTH = 8,  // Width of tag field
    parameter ENABLE_SG = 0,  // Enable support for scatter/gather DMA (multiple descriptors per AXI stream frame)
    parameter ENABLE_UNALIGNED = 0  // Enable support for unaligned transfers
)
(
    // Ports
    input  wire                       clk,  // Clock signal
    input  wire                       rst,  // Reset signal

    // AXI read descriptor input
    input  wire [AXI_ADDR_WIDTH-1:0]  s_axis_read_desc_addr,
    input  wire [LEN_WIDTH-1:0]       s_axis_read_desc_len,
    input  wire [TAG_WIDTH-1:0]       s_axis_read_desc_tag,
    input  wire [AXIS_ID_WIDTH-1:0]   s_axis_read_desc_id,
    input  wire [AXIS_DEST_WIDTH-1:0] s_axis_read_desc_dest,
    input  wire [AXIS_USER_WIDTH-1:0] s_axis_read_desc_user,
    input  wire                       s_axis_read_desc_valid,
    output wire                       s_axis_read_desc_ready,

    // AXI read descriptor status output
    output wire [TAG_WIDTH-1:0]       m_axis_read_desc_status_tag,
    output wire [3:0]                 m_axis_read_desc_status_error,
    output wire                       m_axis_read_desc_status_valid,

    // AXI stream read data output
    output wire [AXIS_DATA_WIDTH-1:0] m_axis_read_data_tdata,
    output wire [AXIS_KEEP_WIDTH-1:0] m_axis_read_data_tkeep,
    output wire                       m_axis_read_data_tvalid,
    input  wire                       m_axis_read_data_tready,
    output wire                       m_axis_read_data_tlast,
    output wire [AXIS_ID_WIDTH-1:0]   m_axis_read_data_tid,
    output wire [AXIS_DEST_WIDTH-1:0] m_axis_read_data_tdest,
    output wire [AXIS_USER_WIDTH-1:0] m_axis_read_data_tuser,

    // AXI write descriptor input
    input  wire [AXI_ADDR_WIDTH-1:0]  s_axis_write_desc_addr,
    input  wire [LEN_WIDTH-1:0]       s_axis_write_desc_len,
    input  wire [TAG_WIDTH-1:0]       s_axis_write_desc_tag,
    input  wire                       s_axis_write_desc_valid,
    output wire                       s_axis_write_desc_ready,

    // AXI write descriptor status output
    output wire [LEN_WIDTH-1:0]       m_axis_write_desc_status_len,
    output wire [TAG_WIDTH-1:0]       m_axis_write_desc_status_tag,
    output wire [AXIS_ID_WIDTH-1:0]   m_axis_write_desc_status_id,
    output wire [AXIS_DEST_WIDTH-1:0] m_axis_write_desc_status_dest,
    output wire [AXIS_USER_WIDTH-1:0] m_axis_write_desc_status_user,
    output wire [3:0]                 m_axis_write_desc_status_error,
    output wire                       m_axis_write_desc_status_valid,

    // AXI stream write data input
    input  wire [AXIS_DATA_WIDTH-1:0] s_axis_write_data_tdata,
    input  wire [AXIS_KEEP_WIDTH-1:0] s_axis_write_data_tkeep,
    input  wire                       s_axis_write_data_tvalid,
    output wire                       s_axis_write_data_tready,
    input  wire                       s_axis_write_data_tlast,
    input  wire [AXIS_ID_WIDTH-1:0]   s_axis_write_data_tid,
    input  wire [AXIS_DEST_WIDTH-1:0] s_axis_write_data_tdest,
    input  wire [AXIS_USER_WIDTH-1:0] s_axis_write_data_tuser,

    // AXI master interface
    output wire [AXI_ID_WIDTH-1:0]    m_axi_awid,
    output wire [AXI_ADDR_WIDTH-1:0]  m_axi_awaddr,
    output wire [7:0]                 m_axi_awlen,
    output wire [2:0]                 m_axi_awsize,
    output wire [1:0]                 m_axi_awburst,
    output wire                       m_axi_awlock,
    output wire [3:0]                 m_axi_awcache,
    output wire [2:0]                 m_axi_awprot,
    output wire                       m_axi_awvalid,
    input  wire                       m_axi_awready,
    output wire [AXI_DATA_WIDTH-1:0]  m_axi_wdata,
    output wire [AXI_STRB_WIDTH-1:0]  m_axi_wstrb,
    output wire                       m_axi_wlast,
    output wire                       m_axi_wvalid,
    input  wire                       m_axi_wready,
    input  wire [AXI_ID_WIDTH-1:0]    m_axi_bid,
    input  wire [1:0]                 m_axi_bresp,
    input  wire                       m_axi_bvalid,
    output wire                       m_axi_bready,
    output wire [AXI_ID_WIDTH-1:0]    m_axi_arid,
    output wire [AXI_ADDR_WIDTH-1:0]  m_axi_araddr,
    output wire [7:0]                 m_axi_arlen,
    output wire [2:0]                 m_axi_arsize,
    output wire [1:0]                 m_axi_arburst,
    output wire                       m_axi_arlock,
    output wire [3:0]                 m_axi_arcache,
    output wire [2:0]                 m_axi_arprot,
    output wire                       m_axi_arvalid,
    input  wire                       m_axi_arready,
    input  wire [AXI_ID_WIDTH-1:0]    m_axi_rid,
    input  wire [AXI_DATA_WIDTH-1:0]  m_axi_rdata,
    input  wire [1:0]                 m_axi_rresp,
    input  wire                       m_axi_rlast,
    input  wire                       m_axi_rvalid,
    output wire                       m_axi_rready,

    // Configuration
    input  wire                       read_enable,
    input  wire                       write_enable,
    input  wire                       write_abort
);

// Internal signals for read DMA
wire [AXI_ADDR_WIDTH-1:0]  rd_m_axi_araddr;
wire [7:0]                 rd_m_axi_arlen;
wire                       rd_m_axi_arvalid;
wire                       rd_m_axi_arready;
wire [AXI_DATA_WIDTH-1:0]  rd_m_axi_rdata;
wire                       rd_m_axi_rlast;
wire                       rd_m_axi_rvalid;
wire                       rd_m_axi_rready;
wire [3:0]                 rd_status_error;

// Internal signals for write DMA
wire [AXI_ADDR_WIDTH-1:0]  wr_m_axi_awaddr;
wire [7:0]                 wr_m_axi_awlen;
wire                       wr_m_axi_awvalid;
wire                       wr_m_axi_awready;
wire [AXI_DATA_WIDTH-1:0]  wr_m_axi_wdata;
wire [AXI_STRB_WIDTH-1:0]  wr_m_axi_wstrb;
wire                       wr_m_axi_wlast;
wire                       wr_m_axi_wvalid;
wire                       wr_m_axi_wready;
wire [3:0]                 wr_status_error;

// Instantiate read DMA module (axi_dma_rd)
axi_dma_rd #(
    .AXI_DATA_WIDTH(AXI_DATA_WIDTH),
    .AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
    .AXI_ID_WIDTH(AXI_ID_WIDTH),
    .AXI_MAX_BURST_LEN(AXI_MAX_BURST_LEN),
    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
    .AXIS_KEEP_ENABLE(AXIS_KEEP_ENABLE),
    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
    .AXIS_LAST_ENABLE(AXIS_LAST_ENABLE),
    .AXIS_ID_ENABLE(AXIS_ID_ENABLE),
    .AXIS_ID_WIDTH(AXIS_ID_WIDTH),
    .AXIS_DEST_ENABLE(AXIS_DEST_ENABLE),
    .AXIS_DEST_WIDTH(AXIS_DEST_WIDTH),
    .AXIS_USER_ENABLE(AXIS_USER_ENABLE),
    .AXIS_USER_WIDTH(AXIS_USER_WIDTH),
    .LEN_WIDTH(LEN_WIDTH),
    .TAG_WIDTH(TAG_WIDTH),
    .ENABLE_SG(ENABLE_SG),
    .ENABLE_UNALIGNED(ENABLE_UNALIGNED)
) axi_dma_rd_inst (
    .clk(clk),
    .rst(rst),
    .s_axis_read_desc_addr(s_axis_read_desc_addr),
    .s_axis_read_desc_len(s_axis_read_desc_len),
    .s_axis_read_desc_tag(s_axis_read_desc_tag),
    .s_axis_read_desc_id(s_axis_read_desc_id),
    .s_axis_read_desc_dest(s_axis_read_desc_dest),
    .s_axis_read_desc_user(s_axis_read_desc_user),
    .s_axis_read_desc_valid(s_axis_read_desc_valid),
    .s_axis_read_desc_ready(s_axis_read_desc_ready),
    .m_axis_read_desc_status_tag(m_axis_read_desc_status_tag),
    .m_axis_read_desc_status_error(rd_status_error),
    .m_axis_read_desc_status_valid(m_axis_read_desc_status_valid),
    .m_axis_read_data_tdata(m_axis_read_data_tdata),
    .m_axis_read_data_tkeep(m_axis_read_data_tkeep),
    .m_axis_read_data_tvalid(m_axis_read_data_tvalid),
    .m_axis_read_data_tready(m_axis_read_data_tready),
    .m_axis_read_data_tlast(m_axis_read_data_tlast),
    .m_axis_read_data_tid(m_axis_read_data_tid),
    .m_axis_read_data_tdest(m_axis_read_data_tdest),
    .m_axis_read_data_tuser(m_axis_read_data_tuser),
    .m_axi_araddr(rd_m_axi_araddr),
    .m_axi_arlen(rd_m_axi_arlen),
    .m_axi_arvalid(rd_m_axi_arvalid),
    .m_axi_arready(rd_m_axi_arready),
    .m_axi_rdata(rd_m_axi_rdata),
    .m_axi_rlast(rd_m_axi_rlast),
    .m_axi_rvalid(rd_m_axi_rvalid),
    .m_axi_rready(rd_m_axi_rready),
    .read_enable(read_enable)
);

// Instantiate write DMA module (axi_dma_wr)
axi_dma_wr #(
    .AXI_DATA_WIDTH(AXI_DATA_WIDTH),
    .AXI_ADDR_WIDTH(AXI_ADDR_WIDTH),
    .AXI_ID_WIDTH(AXI_ID_WIDTH),
    .AXI_MAX_BURST_LEN(AXI_MAX_BURST_LEN),
    .AXIS_DATA_WIDTH(AXIS_DATA_WIDTH),
    .AXIS_KEEP_ENABLE(AXIS_KEEP_ENABLE),
    .AXIS_KEEP_WIDTH(AXIS_KEEP_WIDTH),
    .AXIS_LAST_ENABLE(AXIS_LAST_ENABLE),
    .AXIS_ID_ENABLE(AXIS_ID_ENABLE),
    .AXIS_ID_WIDTH(AXIS_ID_WIDTH),
    .AXIS_DEST_ENABLE(AXIS_DEST_ENABLE),
    .AXIS_DEST_WIDTH(AXIS_DEST_WIDTH),
    .AXIS_USER_ENABLE(AXIS_USER_ENABLE),
    .AXIS_USER_WIDTH(AXIS_USER_WIDTH),
    .LEN_WIDTH(LEN_WIDTH),
    .TAG_WIDTH(TAG_WIDTH),
    .ENABLE_SG(ENABLE_SG),
    .ENABLE_UNALIGNED(ENABLE_UNALIGNED)
) axi_dma_wr_inst (
    .clk(clk),
    .rst(rst),
    .s_axis_write_desc_addr(s_axis_write_desc_addr),
    .s_axis_write_desc_len(s_axis_write_desc_len),
    .s_axis_write_desc_tag(s_axis_write_desc_tag),
    .s_axis_write_desc_valid(s_axis_write_desc_valid),
    .s_axis_write_desc_ready(s_axis_write_desc_ready),
    .m_axis_write_desc_status_len(m_axis_write_desc_status_len),
    .m_axis_write_desc_status_tag(m_axis_write_desc_status_tag),
    .m_axis_write_desc_status_id(m_axis_write_desc_status_id),
    .m_axis_write_desc_status_dest(m_axis_write_desc_status_dest),
    .m_axis_write_desc_status_user(m_axis_write_desc_status_user),
    .m_axis_write_desc_status_error(wr_status_error),
    .m_axis_write_desc_status_valid(m_axis_write_desc_status_valid),
    .s_axis_write_data_tdata(s_axis_write_data_tdata),
    .s_axis_write_data_tkeep(s_axis_write_data_tkeep),
    .s_axis_write_data_tvalid(s_axis_write_data_tvalid),
    .s_axis_write_data_tready(s_axis_write_data_tready),
    .s_axis_write_data_tlast(s_axis_write_data_tlast),
    .s_axis_write_data_tid(s_axis_write_data_tid),
    .s_axis_write_data_tdest(s_axis_write_data_tdest),
    .s_axis_write_data_tuser(s_axis_write_data_tuser),
    .m_axi_awaddr(wr_m_axi_awaddr),
    .m_axi_awlen(wr_m_axi_awlen),
    .m_axi_awvalid(wr_m_axi_awvalid),
    .m_axi_awready(wr_m_axi_awready),
    .m_axi_wdata(wr_m_axi_wdata),
    .m_axi_wstrb(wr_m_axi_wstrb),
    .m_axi_wlast(wr_m_axi_wlast),
    .m_axi_wvalid(wr_m_axi_wvalid),
    .m_axi_wready(wr_m_axi_wready),
    .write_enable(write_enable),
    .write_abort(write_abort)
);

// Connecting AXI master interface signals from submodules
assign m_axi_awid = {AXI_ID_WIDTH{1'b0}};
assign m_axi_awaddr = wr_m_axi_awaddr;
assign m_axi_awlen = wr_m_axi_awlen;
assign m_axi_awsize = $clog2(AXI_DATA_WIDTH/8);
assign m_axi_awburst = 2'b01;
assign m_axi_awlock = 1'b0;
assign m_axi_awcache = 4'b0011;
assign m_axi_awprot = 3'b000;
assign m_axi_awvalid = wr_m_axi_awvalid;
assign wr_m_axi_awready = m_axi_awready;

assign m_axi_wdata = wr_m_axi_wdata;
assign m_axi_wstrb = wr_m_axi_wstrb;
assign m_axi_wlast = wr_m_axi_wlast;
assign m_axi_wvalid = wr_m_axi_wvalid;
assign wr_m_axi_wready = m_axi_wready;

assign m_axi_bready = 1'b1;

assign m_axi_arid = {AXI_ID_WIDTH{1'b0}};
assign m_axi_araddr = rd_m_axi_araddr;
assign m_axi_arlen = rd_m_axi_arlen;
assign m_axi_arsize = $clog2(AXI_DATA_WIDTH/8);
assign m_axi_arburst = 2'b01;
assign m_axi_arlock = 1'b0;
assign m_axi_arcache = 4'b0011;
assign m_axi_arprot = 3'b000;
assign m_axi_arvalid = rd_m_axi_arvalid;
assign rd_m_axi_arready = m_axi_arready;

assign rd_m_axi_rdata = m_axi_rdata;
assign rd_m_axi_rlast = m_axi_rlast;
assign rd_m_axi_rvalid = m_axi_rvalid;
assign m_axi_rready = rd_m_axi_rready;

endmodule
```