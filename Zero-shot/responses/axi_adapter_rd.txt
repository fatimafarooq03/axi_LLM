```verilog
module axi_adapter_rd #
(
    parameter ADDR_WIDTH = 32,       
    parameter S_DATA_WIDTH = 32,     
    parameter S_STRB_WIDTH = (S_DATA_WIDTH/8),  
    parameter M_DATA_WIDTH = 32,     
    parameter M_STRB_WIDTH = (M_DATA_WIDTH/8),  
    parameter ID_WIDTH = 8,          
    parameter ARUSER_ENABLE = 0,     
    parameter ARUSER_WIDTH = 1,      
    parameter RUSER_ENABLE = 0,     
    parameter RUSER_WIDTH = 1,
    parameter CONVERT_BURST = 1,  
    parameter CONVERT_NARROW_BURST = 0,  
    parameter FORWARD_ID = 0        
)
(
    input  wire                     clk,    
    input  wire                     rst,    

    input  wire [ID_WIDTH-1:0]      s_axi_arid,
    input  wire [ADDR_WIDTH-1:0]    s_axi_araddr,
    input  wire [7:0]               s_axi_arlen,
    input  wire [2:0]               s_axi_arsize,
    input  wire [1:0]               s_axi_arburst,
    input  wire                     s_axi_arlock,
    input  wire [3:0]               s_axi_arcache,
    input  wire [2:0]               s_axi_arprot,
    input  wire [3:0]               s_axi_arqos,
    input  wire [3:0]               s_axi_arregion,
    input  wire [ARUSER_WIDTH-1:0]  s_axi_aruser,
    input  wire                     s_axi_arvalid,
    output wire                     s_axi_arready,
    output wire [ID_WIDTH-1:0]      s_axi_rid,
    output wire [S_DATA_WIDTH-1:0]  s_axi_rdata,
    output wire [1:0]               s_axi_rresp,
    output wire                     s_axi_rlast,
    output wire [RUSER_WIDTH-1:0]   s_axi_ruser,
    output wire                     s_axi_rvalid,
    input  wire                     s_axi_rready,

    output wire [ID_WIDTH-1:0]      m_axi_arid,
    output wire [ADDR_WIDTH-1:0]    m_axi_araddr,
    output wire [7:0]               m_axi_arlen,
    output wire [2:0]               m_axi_arsize,
    output wire [1:0]               m_axi_arburst,
    output wire                     m_axi_arlock,
    output wire [3:0]               m_axi_arcache,
    output wire [2:0]               m_axi_arprot,
    output wire [3:0]               m_axi_arqos,
    output wire [3:0]               m_axi_arregion,
    output wire [ARUSER_WIDTH-1:0]  m_axi_aruser,
    output wire                     m_axi_arvalid,
    input  wire                     m_axi_arready,
    input  wire [ID_WIDTH-1:0]      m_axi_rid,
    input  wire [M_DATA_WIDTH-1:0]  m_axi_rdata,
    input  wire [1:0]               m_axi_rresp,
    input  wire                     m_axi_rlast,
    input  wire [RUSER_WIDTH-1:0]   m_axi_ruser,
    input  wire                     m_axi_rvalid,
    output wire                     m_axi_rready
);

// State definitions
localparam STATE_IDLE = 2'd0;
localparam STATE_DATA = 2'd1;
localparam STATE_DATA_READ = 2'd2;
localparam STATE_DATA_SPLIT = 2'd3;

// Internal registers
reg [1:0] state, next_state;
reg [ADDR_WIDTH-1:0] r_addr;
reg [7:0] r_len;
reg [2:0] r_size;
reg [1:0] r_burst;
reg [ID_WIDTH-1:0] r_id;

// State machine
always @(posedge clk) begin
    if (rst) begin
        state <= STATE_IDLE;
    end else begin
        state <= next_state;
    end
end

always @* begin
    next_state = state;
    case (state)
        STATE_IDLE: begin
            if (s_axi_arvalid) begin
                r_addr = s_axi_araddr;
                r_len = s_axi_arlen;
                r_size = s_axi_arsize;
                r_burst = s_axi_arburst;
                r_id = s_axi_arid;
                if (EXPAND) begin
                    next_state = STATE_DATA_READ;
                end else begin
                    next_state = STATE_DATA_SPLIT;
                end
            end
        end
        STATE_DATA_READ: begin
            if (m_axi_rvalid && s_axi_rready) begin
                if (m_axi_rlast) begin
                    next_state = STATE_IDLE;
                end
            end
        end
        STATE_DATA_SPLIT: begin
            if (m_axi_rvalid && s_axi_rready) begin
                if (m_axi_rlast || r_len == 8'd0) begin
                    next_state = STATE_IDLE;
                end
                r_len = r_len - 1;
            end
        end
    endcase
end

// Assign outputs
assign s_axi_arready = (state == STATE_IDLE);
assign m_axi_arvalid = (state == STATE_IDLE) && s_axi_arvalid && ~rst;
assign m_axi_arid = r_id;
assign m_axi_araddr = r_addr;
assign m_axi_arlen = r_len;
assign m_axi_arsize = r_size;
assign m_axi_arburst = r_burst;
assign m_axi_arlock = s_axi_arlock;
assign m_axi_arcache = s_axi_arcache;
assign m_axi_arprot = s_axi_arprot;
assign m_axi_arqos = s_axi_arqos;
assign m_axi_arregion = s_axi_arregion;
assign m_axi_aruser = ARUSER_ENABLE ? s_axi_aruser : {ARUSER_WIDTH{1'b0}};
assign m_axi_rready = (state == STATE_DATA_READ || state == STATE_DATA_SPLIT);

assign s_axi_rid = m_axi_rid;
assign s_axi_rdata = m_axi_rdata;
assign s_axi_rresp = m_axi_rresp;
assign s_axi_rlast = m_axi_rlast;
assign s_axi_ruser = RUSER_ENABLE ? m_axi_ruser : {RUSER_WIDTH{1'b0}};
assign s_axi_rvalid = m_axi_rvalid;

endmodule
```